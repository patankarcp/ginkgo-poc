// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/patankarcp/ginkgo-poc/pkg/config"
	"github.com/patankarcp/ginkgo-poc/pkg/http"
	"github.com/patankarcp/ginkgo-poc/pkg/kafka"
	"github.com/patankarcp/ginkgo-poc/pkg/logger"
	"github.com/patankarcp/ginkgo-poc/pkg/server"
)

// Injectors from wire.go:

func InitializeServer(serviceName string) (*server.Server, func()) {
	appConfig := config.NewAppConfig()
	serverConfig := NewServerConfig(appConfig)
	tracer := NewTracer()
	loggerLogger, cleanup := logger.NewLogger(tracer, serviceName)
	factory := NewServerFactory(serverConfig, loggerLogger, tracer)
	httpConfig := NewHttpServiceConfig(appConfig)
	leveledLogger := http.NewLeveledLogger(loggerLogger)
	provider := http.NewClientProvider(tracer, leveledLogger)
	kafkaConfig := NewKafkaConfig(appConfig)
	client := kafka.NewClient(kafkaConfig, tracer, loggerLogger)
	userService := UserService{
		ServerFactory:      factory,
		HTTPConfig:         httpConfig,
		HTTPClientProvider: provider,
		KafkaConfig:        kafkaConfig,
		KafkaClient:        client,
	}
	serverServer := NewServer(userService)
	return serverServer, func() {
		cleanup()
	}
}

// wire.go:

// This is in a separate common package
var GCommonSet = wire.NewSet(
	NewServerConfig,
	NewServerFactory, config.NewAppConfig, NewKafkaConfig, kafka.NewClient, wire.Bind(new(kafka.Logger), new(logger.Logger)), logger.NewLogger, NewTracer,
	NewHttpServiceConfig, http.NewClientProvider, wire.Bind(new(http.Logger), new(logger.Logger)), http.NewLeveledLogger,
)
